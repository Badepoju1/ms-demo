#!/bin/bash
# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euxo pipefail

print_license_header() {
    cat "${SCRIPTDIR}/license_header.txt"
    echo
}

print_autogenerated_warning() {
    cat<<EOF
# ----------------------------------------------------------
# WARNING: This file is autogenerated. Do not manually edit.
# ----------------------------------------------------------
EOF
}

# Function to compile separate YAML files into one combined file 
combine_manifests() {
    local dir
    dir="$1"

    while IFS= read -d $'\0' -r file; do
        # strip license headers (pattern "^# ")
        awk '
        /^[^# ]/ { found = 1 }
        found { print }' "${file}"

        echo "---"
    done < <(find "${dir}" -name '*.yaml' -type f -print0)
}


# generate compiled release/kubernetes-manifests.yaml from kubernetes-manifests/* 
make_kubernetes_manifests() {
    print_license_header
    print_autogenerated_warning
    combine_manifests "${SCRIPTDIR}/../kubernetes-manifests"
}

# generate compiled release/istio-manifests.yaml from istio-manifests/* 
make_istio_manifests() {
    print_license_header
    print_autogenerated_warning
    combine_manifests "${SCRIPTDIR}/../istio-manifests"
}



# set default repo
REPO_PREFIX="${REPO_PREFIX:-gcr.io/google-samples/microservices-demo}"

# move to repo root
SCRIPT_DIR=$(dirname $(realpath -s $0))
REPO_ROOT=$SCRIPT_DIR/..
cd $REPO_ROOT

# validate version number (format: v0.0.0)
if [[ ! "${NEW_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "${NEW_VERSION} argument must conform to regex string:  ^v[0-9]+\.[0-9]+\.[0-9]+$ "
    echo "ex. v1.0.1"
    exit 1
fi

# ensure there are no uncommitted changes
if [[ $(git status -s | wc -l) -gt 0 ]]; then
    echo "error: can't have uncommitted changes"
    exit 1
fi

# ensure that gcloud is in the PATH
if ! command -v gcloud &> /dev/null
then
    echo "gcloud could not be found"
    exit 1
fi

# replace kubernetes-manifests/ contents 
rm -rf "${REPO_ROOT}/kubernetes-manifests"
mkdir "${REPO_ROOT}/kubernetes-manifests"
cp -a "${REPO_ROOT}/dev-kubernetes-manifests/." "${REPO_ROOT}/kubernetes-manifests/"

# update version in manifests
CURRENT_VERSION=$(grep -A 1 VERSION ${REPO_ROOT}/kubernetes-manifests/*.yaml | grep value | head -n 1 | awk '{print $3}' |  tr -d '"')
find "${REPO_ROOT}/kubernetes-manifests" -name '*.yaml' -exec sed -i -e "s/${CURRENT_VERSION}/${NEW_VERSION}/g" {} \;
# tag image with explicit version
find "${REPO_ROOT}/kubernetes-manifests" -name '*.yaml' -exec sed -i -e "s/:latest/:${NEW_VERSION}/g" {} \;

# Generate compiled YAML files for kubernetes-manifests, istio-manifests 
rm -rf "${REPO_ROOT}/release"
mkdir "${REPO_ROOT}/release"
k8s_manifests_file="${OUT_DIR}/kubernetes-manifests.yaml"
make_kubernetes_manifests > "${k8s_manifests_file}"
log "Wrote ${k8s_manifests_file}"

istio_manifests_file="${OUT_DIR}/istio-manifests.yaml"
make_istio_manifests > "${istio_manifests_file}"
log "Wrote ${istio_manifests_file}"

# push release PR
git checkout -b "release/${NEW_VERSION}"
git add "${REPO_ROOT}/kubernetes-manifests/*.yaml"
git commit -m "release/${NEW_VERSION}"

# add tag
# git tag "${NEW_VERSION}"

# # build and push release images
# skaffold config set local-cluster false
# skaffold build --default-repo="${REPO_PREFIX}" --tag="${NEW_VERSION}"
# skaffold config unset local-cluster

# # push to repo
# git push --set-upstream origin "release/${NEW_VERSION}"
# git push --tags